// ============================================================================
// config.h or config-1.h
// ============================================================================

/************************ Adafruit IO Config *******************************/

// visit io.adafruit.com if you need to create an account,
// or if you need your Adafruit IO key.
#define IO_USERNAME  "rgarland"
#define IO_KEY       "aio_FqiE39vo7Kj4lFjGrqavn3e2KtMd"

/******************************* WIFI **************************************/

// the AdafruitIO_WiFi client will work with the following boards:
//   - HUZZAH ESP8266 Breakout -> https://www.adafruit.com/products/2471
//   - Feather HUZZAH ESP8266 -> https://www.adafruit.com/products/2821
//   - Feather M0 WiFi -> https://www.adafruit.com/products/3010
//   - Feather WICED -> https://www.adafruit.com/products/3056

#define WIFI_SSID       "metabolic"
#define WIFI_PASS       "bert&waffles"

// comment out the following two lines if you are using fona or ethernet
#include "AdafruitIO_WiFi.h"
AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);


/******************************* FONA **************************************/

// the AdafruitIO_FONA client will work with the following boards:
//   - Feather 32u4 FONA -> https://www.adafruit.com/product/3027

// uncomment the following two lines for 32u4 FONA,
// and comment out the AdafruitIO_WiFi client in the WIFI section
// #include "AdafruitIO_FONA.h"
// AdafruitIO_FONA io(IO_USERNAME, IO_KEY);


/**************************** ETHERNET ************************************/

// the AdafruitIO_Ethernet client will work with the following boards:
//   - Ethernet FeatherWing -> https://www.adafruit.com/products/3201

// uncomment the following two lines for ethernet,
// and comment out the AdafruitIO_WiFi client in the WIFI section
// #include "AdafruitIO_Ethernet.h"
// AdafruitIO_Ethernet io(IO_USERNAME, IO_KEY);
// ============================================================================
// mailbox_ifttt.ino 
// ============================================================================
#include "config.h"

#define HALL_SENSOR_PIN 10
#define BATTERY_PIN 9

void connect_AIO() {
//  Serial.println("Connecting to Adafruit IO...");
  io.connect();
  // wait for a connection
  while (io.status() < AIO_CONNECTED) {
//    Serial.print(".");
    delay(100);
  }
  // we are connected
//  Serial.println();
//  Serial.println(io.statusText());
}

void door_opened(){
  if (io.status() < AIO_CONNECTED) connect_AIO();
  AdafruitIO_Feed *mailbox = io.feed("mailbox");
//  Serial.println("Sending door open...");
  mailbox->save(1);
  io.run();
}

void door_closed(){
  if (io.status() < AIO_CONNECTED) connect_AIO();
  AdafruitIO_Feed *mailbox = io.feed("mailbox");
//  Serial.println("Sending door closed...");
  mailbox->save(0);
  io.run();
}

void battery_level() {
  int level = analogRead(BATTERY_PIN);
  // 4.7 to 6.3 V for four AAA batteries
  // 100k and 1M resistor divider
  int percent = map(level, 95, 127, 0, 100);
  if (percent>100) {
    percent = 100;
  } else if (percent<0) {
    percent = 0;
  }
//  Serial.print("Battery level: "); Serial.print(level); Serial.print(", "); Serial.print(percent); Serial.println("%");
  // send battery level to AdafruitIO
  if (io.status() < AIO_CONNECTED) connect_AIO();
  AdafruitIO_Feed *battery = io.feed("battery");
  battery->save(percent);
  io.run();
}

void setup() {
  ESP.eraseConfig();
//  Serial.begin(115200);
  pinMode(HALL_SENSOR_PIN,INPUT);
  if (!digitalRead(HALL_SENSOR_PIN)) {
    door_opened();
    while (!digitalRead(HALL_SENSOR_PIN)) delay(200);
    door_closed();
  }
  battery_level();
  ESP.deepSleep(0);
}

void loop() {
}